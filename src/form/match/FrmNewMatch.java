package form.match;

import components.TableModelPlayerStatistics;
import form.player.FrmDetailsPlayer;
import controller.Communication;
import domain.Match;
import domain.Player;
import domain.PlayerStatistics;
import domain.Stadium;
import domain.Tournament;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import validator.IValidator;
import validator.ValidatorException;
import validator.components.RegularValidator;

/**
 *
 * @author DELL
 */
public class FrmNewMatch extends javax.swing.JDialog {
    
    Match match;
    Match x;
    List<Tournament> tournaments;
    List<Match> matches;
    List<Stadium> stadiums;
    List<Player> players;
    List<PlayerStatistics> statistics = new ArrayList<>();
    Player player1;
    Player player2;
    PlayerStatistics ps1;
    PlayerStatistics ps2;
    boolean matchData = false;
    boolean stats = false;
    int index = 0;
    IValidator validator = new RegularValidator();

    public FrmNewMatch(java.awt.Frame parent, boolean modal, Match match) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.match = match;
        setTitle("Create Match");
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbTournaments = new javax.swing.JComboBox();
        txtDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbPlayer1 = new javax.swing.JComboBox<>();
        cmbPlayer2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbStadium = new javax.swing.JComboBox<>();
        btnSaveMatchData = new javax.swing.JButton();
        btnResetMatchData = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnViewAllMatches = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStatistics = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCreatePlayersStatistics = new javax.swing.JButton();
        btnEditTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Insert match data:"));

        jLabel2.setText("Tournament:");

        jLabel3.setText("Date:");

        jLabel5.setText("Player 1:");

        cmbPlayer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPlayer1ActionPerformed(evt);
            }
        });

        cmbPlayer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPlayer2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Player 2:");

        jLabel7.setText("Stadium:");

        btnSaveMatchData.setText("Confirm Match Data");
        btnSaveMatchData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMatchDataActionPerformed(evt);
            }
        });

        btnResetMatchData.setText("Reset Match Data");
        btnResetMatchData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetMatchDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDate)
                    .addComponent(cmbPlayer1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbPlayer2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbStadium, 0, 223, Short.MAX_VALUE)
                    .addComponent(cmbTournaments, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSaveMatchData, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(btnResetMatchData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTournaments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnResetMatchData))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbStadium, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSaveMatchData)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnViewAllMatches.setText("View All Matches");
        btnViewAllMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllMatchesActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStatistics);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Players Statistics:");

        btnCreatePlayersStatistics.setText("Create Players Statistics");
        btnCreatePlayersStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePlayersStatisticsActionPerformed(evt);
            }
        });

        btnEditTable.setText("Edit Table");
        btnEditTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnCreatePlayersStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(btnEditTable, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreatePlayersStatistics)
                    .addComponent(btnEditTable))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnViewAllMatches, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewAllMatches, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Tournament tournament = (Tournament) cmbTournaments.getSelectedItem();
            LocalDate date = LocalDate.parse(txtDate.getText());
            player1 = (Player) cmbPlayer1.getSelectedItem();
            player2 = (Player) cmbPlayer2.getSelectedItem();
            Stadium stadium = (Stadium) cmbStadium.getSelectedItem();
            
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to save match? ", "", JOptionPane.YES_NO_CANCEL_OPTION );
            if(option == 0) {
                try {
                    match.setTournament(tournament);
                    match.setDate(date);
                    match.setPlayer1(player1);
                    match.setPlayer2(player2);
                    match.setStadium(stadium);
                    
                    if(index == 1) {
                        if(ps1.getWinners() == 0 || ps1.getUnforced_errors() == 0) {
                            JOptionPane.showMessageDialog(this, "This match has already been played, please insert values for unforced errors or winners", "", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if(ps2.getWinners() == 0 || ps2.getUnforced_errors() == 0) {
                            JOptionPane.showMessageDialog(this, "This match has already been played, please insert values for unforced errors or winners", "", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    
                    x = Communication.getInstance().saveMatch(match);
                    JOptionPane.showMessageDialog(this, "The system has memorized match." , "Update", JOptionPane.INFORMATION_MESSAGE);
                    
                    
                    Communication.getInstance().createPlayersStatistics(ps1);
                    Communication.getInstance().createPlayersStatistics(ps2);

                    cmbTournaments.setEnabled(false);
                    txtDate.setEnabled(false);
                    cmbPlayer1.setEnabled(false);
                    cmbPlayer2.setEnabled(false);
                    cmbStadium.setEnabled(false);
                    tblStatistics.setEnabled(false);
                    btnViewAllMatches.setVisible(true);
                    btnSave.setEnabled(false);
                } catch (Exception ex) {
                    Logger.getLogger(FrmDetailsPlayer.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "The system cannot memorize match. ", "Update", JOptionPane.ERROR_MESSAGE);
                }
            } else if(option == 1){
                return;
            } else {
                this.dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnViewAllMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllMatchesActionPerformed
        this.dispose();
        new FrmViewMatches(null, true).setVisible(true);
    }//GEN-LAST:event_btnViewAllMatchesActionPerformed

    private void cmbPlayer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPlayer2ActionPerformed
        setPlayer2((Player) cmbPlayer2.getSelectedItem());
        match.setPlayer2(player2);
    }//GEN-LAST:event_cmbPlayer2ActionPerformed

    private void cmbPlayer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPlayer1ActionPerformed
        setPlayer1((Player) cmbPlayer1.getSelectedItem());
        match.setPlayer1(player1);
    }//GEN-LAST:event_cmbPlayer1ActionPerformed

    private void btnCreatePlayersStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePlayersStatisticsActionPerformed
        if(!matchData) {
            JOptionPane.showMessageDialog(this, "Please confirm match data in order to create players statistics.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        btnResetMatchData.setVisible(true);
        
        JOptionPane.showMessageDialog(this, "The system has created players statistics.", "", JOptionPane.INFORMATION_MESSAGE);
        ps1 = new PlayerStatistics();
        ps1.setPlayer(player1);
        ps1.setMatch(match);
        ps1.setAces(0);
        ps1.setDouble_faults(0);
        ps1.setWinners(0);
        ps1.setNet_points_won(0);
        ps1.setUnforced_errors(0);
            
        ps2 = new PlayerStatistics();
        ps2.setPlayer(player2);
        ps2.setMatch(match);
        ps2.setAces(0);
        ps2.setDouble_faults(0);
        ps2.setWinners(0);
        ps2.setNet_points_won(0);
        ps2.setUnforced_errors(0);
        statistics.add(0,ps1);
        statistics.add(1,ps2);
        tblStatistics.setModel(new TableModelPlayerStatistics(statistics));
        stats = true;
        btnSave.setEnabled(true);
        btnEditTable.setVisible(true);
        btnCreatePlayersStatistics.setEnabled(false);
        
        LocalDate matchDate = LocalDate.parse(txtDate.getText().trim());
        
        if(matchDate.isBefore(LocalDate.now(ZoneId.systemDefault()))) {
            index = 1;
        }
        btnSaveMatchData.setVisible(false);
    }//GEN-LAST:event_btnCreatePlayersStatisticsActionPerformed

    private void btnSaveMatchDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMatchDataActionPerformed
        if(cmbTournaments.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please select tournamnet!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtDate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter date of the match!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(cmbPlayer1.getSelectedIndex()== -1) {
            JOptionPane.showMessageDialog(this, "Please select player 1!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(cmbPlayer2.getSelectedIndex()== -1) {
            JOptionPane.showMessageDialog(this, "Please select player 2!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(cmbStadium.getSelectedIndex()== -1) {
            JOptionPane.showMessageDialog(this, "Please select stadium!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(player1.equals(player2)) {
            JOptionPane.showMessageDialog(this, "Please choose 2 different players!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!(player1.getAtpList().equals(player2.getAtpList()))) {
            JOptionPane.showMessageDialog(this, "Please choose players from the same ATP List!", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Tournament tournament = (Tournament) cmbTournaments.getSelectedItem();
        
        try {
            LocalDate.parse(txtDate.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please insert date in format YYYY/MM/DD", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        player1 = (Player) cmbPlayer1.getSelectedItem();
        player2 = (Player) cmbPlayer2.getSelectedItem();
        Stadium stadium = (Stadium) cmbStadium.getSelectedItem();
        LocalDate date = LocalDate.parse(txtDate.getText());;
        try {
            matches = Communication.getInstance().getAllMatches();
            if(matches != null) {
                boolean available1 = checkDatePlayer1(matches, player1, date, tournament);
                boolean available2 = checkDatePlayer2(matches, player2, date, tournament);
                if(available1 == false) {
                    JOptionPane.showMessageDialog(this, "Player " + player1.getFirstName() + " " + player1.getLastName() + " is already playing on date: " + date + " at tournament " + tournament.getName(), "Data Entry Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(available2 == false) {
                    JOptionPane.showMessageDialog(this, "Player " + player2.getFirstName() + " " + player2.getLastName() + " is already playing on date: " + date + " at tournament " + tournament.getName(), "Data Entry Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            for (Match m : matches) {
                if(m.getPlayer1().equals(player1) && m.getPlayer2().equals(player2) && m.getDate().equals(date) && m.getTournament().equals(tournament)) {
                    JOptionPane.showMessageDialog(this, "Match " + player1 + " VS" + player2 + " is already playing on date " + date + " at tournament " + tournament, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmNewMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            if(!(player1.getAtpList().equals(player2.getAtpList()))) {
                JOptionPane.showMessageDialog(this, "Please choose players who are ranked in the same ATP List", "Data Entry Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        try {
            tournaments = Communication.getInstance().getAllTournaments();
        } catch (Exception ex) {
            Logger.getLogger(FrmNewMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
            for (Tournament t : tournaments) {
                if(t.getName().equals(tournament.getName())) {
                    LocalDate beninningDate = t.getBeginningDate();
                    LocalDate endingDate = t.getEndingDate();
                    if(date.isBefore(beninningDate) || date.isAfter(endingDate)) {
                        JOptionPane.showMessageDialog(this, "Tournament " + tournament.getName() + " is held between " + beninningDate.toString() + " and " + endingDate.toString(), "Date Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if(!(t.getCity().equals(stadium.getCity()))) {
                        JOptionPane.showMessageDialog(this, "Stadium " + stadium.getName() + " isn't available for tournament " + tournament);
                        return;
                    }
                }
            }
        
        cmbTournaments.setEnabled(false);
        txtDate.setEnabled(false);
        cmbPlayer1.setEnabled(false);
        cmbPlayer2.setEnabled(false);
        cmbStadium.setEnabled(false);
        btnSaveMatchData.setEnabled(false);
        matchData = true;
    }//GEN-LAST:event_btnSaveMatchDataActionPerformed

    private void btnEditTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTableActionPerformed
        if(index == 1) {
            tblStatistics.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "This match has not been played yet, you can't edit players statistics.", "", JOptionPane.INFORMATION_MESSAGE);
            tblStatistics.setEnabled(false);
            return;
        }
    }//GEN-LAST:event_btnEditTableActionPerformed

    private void btnResetMatchDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetMatchDataActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to reset match data?", "", JOptionPane.OK_CANCEL_OPTION);
        if(option == 0) {
            prepareForm();
            
            matchData = false;
            ps1 = null;
            ps2 = null;
            statistics = new ArrayList<>();
            tblStatistics.setModel(new TableModelPlayerStatistics(statistics));
            cmbTournaments.setEnabled(true);
            txtDate.setText("");
            txtDate.setEnabled(true);
            cmbPlayer1.setEnabled(true);
            cmbPlayer2.setEnabled(true);
            cmbStadium.setEnabled(true);
            btnResetMatchData.setVisible(false);
            btnSaveMatchData.setEnabled(true);
            btnSaveMatchData.setVisible(true);
            btnCreatePlayersStatistics.setEnabled(true);
        }
    }//GEN-LAST:event_btnResetMatchDataActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePlayersStatistics;
    private javax.swing.JButton btnEditTable;
    private javax.swing.JButton btnResetMatchData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveMatchData;
    private javax.swing.JButton btnViewAllMatches;
    private javax.swing.JComboBox<Player> cmbPlayer1;
    private javax.swing.JComboBox<Player> cmbPlayer2;
    private javax.swing.JComboBox<Stadium> cmbStadium;
    private javax.swing.JComboBox cmbTournaments;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStatistics;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        btnSave.setEnabled(false);
        tblStatistics.setEnabled(false);
        btnEditTable.setVisible(false);
        btnResetMatchData.setVisible(false);
        
        try {
            tournaments = Communication.getInstance().getAllTournaments();
            for (Tournament t : tournaments) {
                cmbTournaments.addItem(t);
            }
            cmbTournaments.setSelectedIndex(-1);
            
            stadiums = Communication.getInstance().getAllStadiums();
            for (Stadium s : stadiums) {
                cmbStadium.addItem(s);
            }
            cmbStadium.setSelectedIndex(-1);
            
            players = Communication.getInstance().getAllPlayers();
            for (Player p : players) {
                cmbPlayer1.addItem(p);
                cmbPlayer2.addItem(p);
            }
            cmbPlayer1.setSelectedIndex(-1);
            cmbPlayer2.setSelectedIndex(-1);
            
            tblStatistics.setModel(new TableModelPlayerStatistics(statistics));
            JTextField jTextField = new JTextField();
            
            TableColumn t1 = tblStatistics.getColumnModel().getColumn(1);
            t1.setCellEditor(new DefaultCellEditor(jTextField));
            
            TableColumn t2 = tblStatistics.getColumnModel().getColumn(2);
            t2.setCellEditor(new DefaultCellEditor(jTextField));
            
            TableColumn t3 = tblStatistics.getColumnModel().getColumn(3);
            t3.setCellEditor(new DefaultCellEditor(jTextField));
            
            TableColumn t4 = tblStatistics.getColumnModel().getColumn(4);
            t4.setCellEditor(new DefaultCellEditor(jTextField));
            
            TableColumn t5 = tblStatistics.getColumnModel().getColumn(5);
            t5.setCellEditor(new DefaultCellEditor(jTextField));
        } catch (Exception ex) {
            Logger.getLogger(FrmDetailsMatch.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        btnViewAllMatches.setVisible(false);
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    Communication.getInstance().deleteMatch(match);
                } catch (Exception ex) {
                    Logger.getLogger(FrmNewMatch.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private boolean checkDatePlayer1(List<Match> matches, Player p, LocalDate date, Tournament tournament) {
        for (Match m : matches) {
            if(m.getPlayer1().getPlayerId().equals(p.getPlayerId()) && m.getDate().toString().equals(date.toString()) && m.getTournament().getName().equals(tournament.getName())) {
                return false;
            }
        }
        return true;
    }
    
    private boolean checkDatePlayer2(List<Match> matches, Player p, LocalDate date, Tournament tournament) {
        for (Match m : matches) {
            if(m.getPlayer2().getPlayerId().equals(p.getPlayerId()) && m.getDate().toString().equals(date.toString()) && m.getTournament().getName().equals(tournament.getName())) {
                return false;
            }
        }
        return true;
    }

    public void setPlayer1(Player player1) {
        this.player1 = player1;
    }

    public void setPlayer2(Player player2) {
        this.player2 = player2;
    }
    
}
