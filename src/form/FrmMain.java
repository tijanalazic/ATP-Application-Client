package form;

import form.match.FrmViewMatches;
import form.match.FrmNewMatch;
import form.atplist.FrmSearchATPLists;
import form.stadium.FrmSearchStadiums;
import form.stadium.FrmNewStadium;
import form.stadium.FrmViewStadiums;
import form.tournament.FrmSearchTournament;
import form.player.FrmSearchPlayer;
import form.tournament.FrmViewTournaments;
import form.tournament.FrmNewTournament;
import form.atplist.FrmNewATPList;
import form.atplist.FrmViewATPLists;
import form.player.FrmViewPlayers;
import form.player.FrmNewPlayer;
import controller.Communication;
import domain.ATPList;
import domain.Match;
import domain.Player;
import domain.Stadium;
import domain.Tournament;
import form.match.FrmSearchMatches;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class FrmMain extends javax.swing.JFrame {

    public FrmMain() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setTitle("Client application");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CreatePlayer = new javax.swing.JMenuItem();
        ViewPlayer = new javax.swing.JMenuItem();
        SearchPlayer = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        CreateTournament = new javax.swing.JMenuItem();
        ViewTournament = new javax.swing.JMenuItem();
        SearchTournament = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        CreateMatch = new javax.swing.JMenuItem();
        ViewMatch = new javax.swing.JMenuItem();
        SearchMatch = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        CreateATPList = new javax.swing.JMenuItem();
        ViewATPList = new javax.swing.JMenuItem();
        SearchATPList = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        CreateStadium = new javax.swing.JMenuItem();
        ViewStadium = new javax.swing.JMenuItem();
        SearchStadium = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATP application");
        setBackground(new java.awt.Color(153, 153, 255));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/atplogo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenu1.setText("Player");

        CreatePlayer.setText("Create");
        CreatePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePlayerActionPerformed(evt);
            }
        });
        jMenu1.add(CreatePlayer);

        ViewPlayer.setText("View");
        ViewPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPlayerActionPerformed(evt);
            }
        });
        jMenu1.add(ViewPlayer);

        SearchPlayer.setText("Search");
        SearchPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPlayerActionPerformed(evt);
            }
        });
        jMenu1.add(SearchPlayer);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tournaments");

        CreateTournament.setText("Create");
        CreateTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateTournamentActionPerformed(evt);
            }
        });
        jMenu2.add(CreateTournament);

        ViewTournament.setText("View");
        ViewTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewTournamentActionPerformed(evt);
            }
        });
        jMenu2.add(ViewTournament);

        SearchTournament.setText("Search");
        SearchTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTournamentActionPerformed(evt);
            }
        });
        jMenu2.add(SearchTournament);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Matches");

        CreateMatch.setText("Create");
        CreateMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateMatchActionPerformed(evt);
            }
        });
        jMenu3.add(CreateMatch);

        ViewMatch.setText("View");
        ViewMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewMatchActionPerformed(evt);
            }
        });
        jMenu3.add(ViewMatch);

        SearchMatch.setText("Search");
        SearchMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchMatchActionPerformed(evt);
            }
        });
        jMenu3.add(SearchMatch);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("ATPLists");

        CreateATPList.setText("Create");
        CreateATPList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateATPListActionPerformed(evt);
            }
        });
        jMenu4.add(CreateATPList);

        ViewATPList.setText("View");
        ViewATPList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewATPListActionPerformed(evt);
            }
        });
        jMenu4.add(ViewATPList);

        SearchATPList.setText("Search");
        SearchATPList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchATPListActionPerformed(evt);
            }
        });
        jMenu4.add(SearchATPList);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Stadiums");

        CreateStadium.setText("Create");
        CreateStadium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateStadiumActionPerformed(evt);
            }
        });
        jMenu5.add(CreateStadium);

        ViewStadium.setText("View");
        ViewStadium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewStadiumActionPerformed(evt);
            }
        });
        jMenu5.add(ViewStadium);

        SearchStadium.setText("Search");
        SearchStadium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchStadiumActionPerformed(evt);
            }
        });
        jMenu5.add(SearchStadium);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateATPListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateATPListActionPerformed
        try {
            ATPList atpList = new ATPList();
            atpList.setName("def");
            atpList.setNumberOfPlayers(0);
            atpList = Communication.getInstance().createATPList(atpList);
            
            int option = JOptionPane.showConfirmDialog(this, "The system has created new ATP list.", "", JOptionPane.OK_CANCEL_OPTION);
            if (option == 0) {
                new FrmNewATPList(null, true, atpList).setVisible(true);
            } else {
                Communication.getInstance().deleteATPList(atpList);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "The system cannot new ATP list.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreateATPListActionPerformed

    private void CreatePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePlayerActionPerformed
        try {
            Player p = new Player();
            p.setFirstName("def");
            p.setLastName("def");
            p.setBirthday(LocalDate.now(ZoneId.systemDefault()));
            p.setState("def");
            p.setPoints(0);
            p.setHeight(0.0);
            p.setWeight(0.0);
            ATPList atpList = new ATPList(0l);
            p.setAtpList(atpList);
            p = Communication.getInstance().createPlayer(p);
            
            int option = JOptionPane.showConfirmDialog(this, "The system has created new player.", "", JOptionPane.OK_CANCEL_OPTION);
            if(option == 0) {
                new FrmNewPlayer(null, true, p).setVisible(true);
            } else {
                Communication.getInstance().deletePlayer(p);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "The system cannot create new player.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreatePlayerActionPerformed

    private void ViewPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPlayerActionPerformed
        new FrmViewPlayers(this, true).setVisible(true);
    }//GEN-LAST:event_ViewPlayerActionPerformed

    private void ViewATPListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewATPListActionPerformed
        new FrmViewATPLists(this, true).setVisible(true);
    }//GEN-LAST:event_ViewATPListActionPerformed

    private void CreateStadiumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateStadiumActionPerformed
        try {
            Stadium stadium = new Stadium();
            stadium.setName("def");
            stadium.setCity("def");
            stadium.setNumberOfSeats(0);
            stadium = Communication.getInstance().createStadium(stadium);
            
            System.out.println(stadium.getInsertValues());
            
            JOptionPane.showMessageDialog(this, "The system cannot create new stadium. ", "", JOptionPane.ERROR_MESSAGE);
            int option = JOptionPane.showConfirmDialog(this, "The system has created new stadium. ", "", JOptionPane.OK_CANCEL_OPTION);
            if (option == 0) {
                new FrmNewStadium(null, true, stadium).setVisible(true);
            } else {
                Communication.getInstance().deleteStadium(stadium);
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "The system cannot create new stadium. ", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreateStadiumActionPerformed

    private void ViewStadiumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewStadiumActionPerformed
        new FrmViewStadiums(this, true).setVisible(true);
    }//GEN-LAST:event_ViewStadiumActionPerformed

    private void CreateTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateTournamentActionPerformed
        try {
            Tournament tournament = new Tournament();
            tournament.setName("def");
            tournament.setCity("def");
            tournament.setBeginningDate(LocalDate.now(ZoneId.systemDefault()));
            tournament.setEndingDate(LocalDate.now(ZoneId.systemDefault()));
            tournament.setNumberOfPlayers(0);
            tournament.setAtpType(-1);
            tournament = Communication.getInstance().createTournament(tournament);
            
            System.out.println(tournament.getInsertValues());
            int option = JOptionPane.showConfirmDialog(this, "The system has created new tournament. ", "", JOptionPane.OK_CANCEL_OPTION);
            if (option == 0) {
                new FrmNewTournament(this, true,tournament).setVisible(true);
            } else {
                Communication.getInstance().deleteTournament(tournament);
            }   
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "The system cannot create new tournament.", "", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CreateTournamentActionPerformed

    private void ViewTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewTournamentActionPerformed
        new FrmViewTournaments(this, true).setVisible(true);
    }//GEN-LAST:event_ViewTournamentActionPerformed

    private void CreateMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateMatchActionPerformed
        try {
            Match m = new Match();
            Tournament t = new Tournament(0l);
            m.setTournament(t);
            m.setDate(LocalDate.now(ZoneId.systemDefault()));
            Player player1 = new Player(0l);
            m.setPlayer1(player1);
            Player player2 = new Player(0l);
            m.setPlayer2(player2);
            Stadium stadium = new Stadium(0l);
            m.setStadium(stadium);
            
            m = Communication.getInstance().createMatch(m);
            
            int option = JOptionPane.showConfirmDialog(this, "The system has created new match.", "", JOptionPane.OK_CANCEL_OPTION);
            if (option == 0) {
                new FrmNewMatch(null, true, m).setVisible(true);
            } else {
                Communication.getInstance().deleteMatch(m);
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "The system cannot create new match.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreateMatchActionPerformed

    private void SearchPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPlayerActionPerformed
        new FrmSearchPlayer(null, true).setVisible(true);
    }//GEN-LAST:event_SearchPlayerActionPerformed

    private void SearchTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTournamentActionPerformed
        new FrmSearchTournament(null, true).setVisible(true);
    }//GEN-LAST:event_SearchTournamentActionPerformed

    private void SearchStadiumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchStadiumActionPerformed
        new FrmSearchStadiums(null, true).setVisible(true);
    }//GEN-LAST:event_SearchStadiumActionPerformed

    private void SearchATPListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchATPListActionPerformed
        new FrmSearchATPLists(null, true).setVisible(true);
    }//GEN-LAST:event_SearchATPListActionPerformed

    private void ViewMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewMatchActionPerformed
        new FrmViewMatches(null, true).setVisible(true);
    }//GEN-LAST:event_ViewMatchActionPerformed

    private void SearchMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchMatchActionPerformed
        new FrmSearchMatches(null, true).setVisible(true);
    }//GEN-LAST:event_SearchMatchActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CreateATPList;
    private javax.swing.JMenuItem CreateMatch;
    private javax.swing.JMenuItem CreatePlayer;
    private javax.swing.JMenuItem CreateStadium;
    private javax.swing.JMenuItem CreateTournament;
    private javax.swing.JMenuItem SearchATPList;
    private javax.swing.JMenuItem SearchMatch;
    private javax.swing.JMenuItem SearchPlayer;
    private javax.swing.JMenuItem SearchStadium;
    private javax.swing.JMenuItem SearchTournament;
    private javax.swing.JMenuItem ViewATPList;
    private javax.swing.JMenuItem ViewMatch;
    private javax.swing.JMenuItem ViewPlayer;
    private javax.swing.JMenuItem ViewStadium;
    private javax.swing.JMenuItem ViewTournament;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
