package form.atplist;

import controller.Communication;
import domain.ATPList;
import domain.Player;
import form.stadium.FrmDetailsStadium;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import validator.IValidator;
import validator.ValidatorException;
import validator.components.RegularValidator;

/**
 *
 * @author DELL
 */
public class FrmDetailsATPLists extends javax.swing.JDialog {
    
    ATPList atpList;
    IValidator validator = new RegularValidator();

    public FrmDetailsATPLists(java.awt.Frame parent, boolean modal, ATPList aTPList) {
        super(parent, modal);
        this.atpList = aTPList;
        initComponents();
        setLocationRelativeTo(null);
        setTitle("ATP List Details");
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtNumberOfPlayers = new javax.swing.JTextField();
        lblNumberOfPlayers = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnAllowChanges = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Insert data for ATP List"));

        lblName.setText("Name:");

        lblNumberOfPlayers.setText("Number of players:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNumberOfPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(txtNumberOfPlayers))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumberOfPlayers)
                    .addComponent(txtNumberOfPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAllowChanges.setText("Allow Changes");
        btnAllowChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllowChangesActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addGap(32, 32, 32)
                        .addComponent(btnAllowChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnAllowChanges)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            validator.validateATPList(txtName.getText().trim(), txtNumberOfPlayers.getText().trim());
        } catch (ValidatorException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Data Entry Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String name = txtName.getText().trim();
        Integer numberOfPlayers = Integer.parseInt(txtNumberOfPlayers.getText().trim());

        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to update ATP List: " + atpList.getName());
        if(option == 0) {
            try {
                atpList.setName(name);
                atpList.setNumberOfPlayers(numberOfPlayers);
                atpList = Communication.getInstance().saveATPList(atpList);
                JOptionPane.showMessageDialog(this, "The system has memorized ATP List. ", "Update", JOptionPane.INFORMATION_MESSAGE);
                btnUpdate.setEnabled(false);
                txtName.setEnabled(false);
                txtNumberOfPlayers.setEnabled(false);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "The system cannot memorize ATP List. ", "Update", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
        } else {
            return;
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAllowChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllowChangesActionPerformed
        btnUpdate.setEnabled(true);
        txtName.setEnabled(true);
        txtNumberOfPlayers.setEnabled(true);
    }//GEN-LAST:event_btnAllowChangesActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel updating atplist: " + atpList.getName());
        if(option == 0) {
            this.dispose();
        } else {
            return;
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete ATP List: " + atpList.getName());
            if(option == 0) {
                try {
                    List<Player> players = Communication.getInstance().getAllPlayers();
                    for (Player p : players) {
                        if(p.getAtpList().equals(atpList)) {
                           JOptionPane.showMessageDialog(this, "Please update ATP List for players that are playing on " + atpList.getName() + "if you want to delete it.", "", JOptionPane.ERROR_MESSAGE);
                           return;
                        }
                    }
                    Communication.getInstance().deleteATPList(atpList);
                    JOptionPane.showMessageDialog(this, "The system has deleted ATP List. " + atpList.getName(), "Delete", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } catch (Exception ex) {
                    java.util.logging.Logger.getLogger(FrmDetailsStadium.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "The system cannot delete ATP List. " + atpList.getName(), "Delete", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllowChanges;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumberOfPlayers;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNumberOfPlayers;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        txtName.setEnabled(false);
        txtNumberOfPlayers.setEnabled(false);
        btnUpdate.setEnabled(false);
        
        fillForm(atpList);
    }

    private void fillForm(ATPList atpList) {
        txtName.setText(atpList.getName());
        txtNumberOfPlayers.setText(atpList.getNumberOfPlayers().toString());
    }
    
    
}
