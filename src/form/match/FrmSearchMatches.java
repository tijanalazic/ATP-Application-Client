package form.match;

import components.TableModelMatch;
import components.TableModelPlayerStatistics;
import controller.Communication;
import domain.Match;
import domain.Player;
import domain.Tournament;
import form.player.FrmViewPlayers;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class FrmSearchMatches extends javax.swing.JDialog {

    /**
     * Creates new form FrmSearchMatches
     */
    
    List<Match> matches;
    List<Match> newMatches;
    
    public FrmSearchMatches(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Search Matches");
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbSearch = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        panelMatches = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatches = new javax.swing.JTable();
        btnUpdateTable = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Matches:");

        jLabel2.setText("Choose value to search for:");

        cmbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        panelMatches.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblMatches);

        javax.swing.GroupLayout panelMatchesLayout = new javax.swing.GroupLayout(panelMatches);
        panelMatches.setLayout(panelMatchesLayout);
        panelMatchesLayout.setHorizontalGroup(
            panelMatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMatchesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelMatchesLayout.setVerticalGroup(
            panelMatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMatchesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnUpdateTable.setText("Update table");
        btnUpdateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTableActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnUpdateTable)
                        .addGap(43, 43, 43)
                        .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(31, 31, 31)
                .addComponent(panelMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTable)
                    .addComponent(btnDetails))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            matches = Communication.getInstance().getAllMatches();
            newMatches = new ArrayList<>();
            Tournament tournament = (Tournament) cmbSearch.getSelectedItem();
            for (Match m : matches) {
                if(m.getTournament().equals(tournament)) {
                    newMatches.add(m);
                }
            }
            if(newMatches.isEmpty()) {
                JOptionPane.showMessageDialog(this, "The system cannot find matches at the given value.", "", JOptionPane.ERROR_MESSAGE);
                prepareTable(newMatches);
                return;
            }
            prepareTable(new ArrayList<>());
            prepareTable(newMatches);
            JOptionPane.showMessageDialog(this, "The system has found matches at the given value.", "", JOptionPane.INFORMATION_MESSAGE);
            btnDetails.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(FrmSearchMatches.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        int selectedRow = tblMatches.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select row!", "", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            Match match = new Match();
            List<Match> matches = Communication.getInstance().getAllMatches();
            Player player1 = (Player) tblMatches.getModel().getValueAt(selectedRow, 1);
            Player player2 = (Player) tblMatches.getModel().getValueAt(selectedRow, 2);
            LocalDate date = (LocalDate) tblMatches.getModel().getValueAt(selectedRow, 3);
            for (Match m : matches) {
                if(m.getPlayer1().equals(player1) && m.getPlayer2().equals(player2) && m.getDate().equals(date)) {
                    match = m;
                }
            }
            JOptionPane.showMessageDialog(this, "The system has loaded match.", "", JOptionPane.INFORMATION_MESSAGE);
            new FrmDetailsMatch(null, true, match).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(FrmViewPlayers.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "The system cannot load match.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnUpdateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTableActionPerformed
        newMatches = new ArrayList<>();
        Tournament tournament = (Tournament) cmbSearch.getSelectedItem();
        for (Match m : matches) {
            if(m.getTournament().equals(tournament)) {
                newMatches.add(m);
            }
        }
        prepareTable(newMatches);
    }//GEN-LAST:event_btnUpdateTableActionPerformed

    private void cmbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateTable;
    private javax.swing.JComboBox<Tournament> cmbSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelMatches;
    private javax.swing.JTable tblMatches;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        try {
            List<Tournament> tournaments = Communication.getInstance().getAllTournaments();
            for (Tournament tournament : tournaments) {
                cmbSearch.addItem(tournament);
            }
            cmbSearch.setSelectedIndex(-1);
            tblMatches.setModel(new TableModelPlayerStatistics(new ArrayList<>()));
        } catch (Exception ex) {
            Logger.getLogger(FrmSearchMatches.class.getName()).log(Level.SEVERE, null, ex);
        }
        btnDetails.setVisible(false);
    }

    private void prepareTable(List<Match> newMatches) {
        tblMatches.setModel(new TableModelMatch(newMatches));
    }
}
